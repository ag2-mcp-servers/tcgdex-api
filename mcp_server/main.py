# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T10:16:37+00:00



import argparse
import json
import os
from typing import *

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Path

from models import (
    Card,
    CardsGetResponse,
    CategoriesGetResponse,
    DexIdsDexIdGetResponse,
    DexIdsGetResponse,
    EnergyTypesEnergyTypeGetResponse,
    EnergyTypesGetResponse,
    HpGetResponse,
    IllustratorsGetResponse,
    RaritiesGetResponse,
    RegulationMarksGetResponse,
    RegulationMarksRegulationMarkGetResponse,
    RetreatsGetResponse,
    Serie,
    SeriesGetResponse,
    Set,
    SetsGetResponse,
    StagesGetResponse,
    StagesStageGetResponse,
    StringEndpoint,
    SuffixesGetResponse,
    SuffixesSuffixGetResponse,
    TrainerTypesGetResponse,
    TrainerTypesTrainerTypeGetResponse,
    TypesGetResponse,
    TypesTypeGetResponse,
    VariantsGetResponse,
    VariantsVariantGetResponse,
)

app = MCPProxy(
    contact={
        'email': 'contact@tcgdex.net',
        'name': 'TCGdex',
        'url': 'https://github.com/tcgdex/cards-database',
    },
    description='A Multilanguage Pok√©mon TCG Database with Cards Pictures and most of the informations contained on the cards.\nYou can find out more about TCGdex at [https://www.tcgdex.net](https://www.tcgdex.net) or on [Discord](https://discord.gg/NehYTAhsZE).',
    license={
        'name': 'MIT License',
        'url': 'https://github.com/tcgdex/cards-database/blob/master/LICENSE',
    },
    title='TCGdex API',
    version='2.0.0',
    servers=[
        {
            'url': 'https://api.tcgdex.net/v2/{lang}',
            'variables': {
                'lang': {'default': 'en', 'enum': ['en', 'fr', 'es', 'it', 'pt']}
            },
        }
    ],
)


@app.get('/cards', description=""" desc """, tags=['card_data_retrieval'])
def cards():
    """
    fetch the list of cards
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/cards/{cardId}',
    description=""" Find a defined card thatusing its global id """,
    tags=['card_data_retrieval', 'identifier_management'],
)
def find_pets_by_tags(card_id: str = Path(..., alias='cardId')):
    """
    Finds Card by Global ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/categories',
    tags=[
        'card_data_retrieval',
        'category_operations',
        'identifier_management',
        'card_attribute_extraction',
        'energy_type_management',
        'regulation_management',
        'set_operations',
        'trainer_type_management',
        'game_stage_management',
        'suffix_handling',
        'type_management',
        'variant_management',
    ],
)
def get_categories():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/categories/{category}', tags=['category_operations'])
def get_categories__category(category: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/dex-ids', tags=['card_data_retrieval'])
def get_dex_ids():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/dex-ids/{dexId}', tags=['identifier_management'])
def get_dex_ids__dex_id(dex_id: str = Path(..., alias='dexId')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/energy-types',
    tags=[
        'card_data_retrieval',
        'category_operations',
        'identifier_management',
        'card_attribute_extraction',
        'energy_type_management',
        'regulation_management',
        'set_operations',
        'trainer_type_management',
        'game_stage_management',
        'suffix_handling',
        'type_management',
        'variant_management',
    ],
)
def get_energy_types():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/energy-types/{energy-type}', tags=['energy_type_management'])
def get_energy_types__energy_type(energy_type: str = Path(..., alias='energy-type')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/hp',
    tags=[
        'card_data_retrieval',
        'identifier_management',
        'card_attribute_extraction',
        'type_management',
    ],
)
def get_hp():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/hp/{hp}', tags=['identifier_management'])
def get_hp__hp(hp: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/illustrators',
    tags=[
        'card_data_retrieval',
        'category_operations',
        'identifier_management',
        'card_attribute_extraction',
        'energy_type_management',
        'regulation_management',
        'set_operations',
        'trainer_type_management',
        'game_stage_management',
        'suffix_handling',
        'type_management',
        'variant_management',
    ],
)
def get_illustrators():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/illustrators/{illustrator}', tags=['card_attribute_extraction'])
def get_illustrators__illustrator(illustrator: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rarities',
    tags=[
        'card_data_retrieval',
        'category_operations',
        'identifier_management',
        'card_attribute_extraction',
        'energy_type_management',
        'regulation_management',
        'set_operations',
        'trainer_type_management',
        'game_stage_management',
        'suffix_handling',
        'type_management',
        'variant_management',
    ],
)
def get_rarities():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/rarities/{rarity}', tags=['card_attribute_extraction'])
def get_rarities__rarity(rarity: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/regulation-marks', tags=['card_data_retrieval'])
def get_regulation_marks():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/regulation-marks/{regulation-mark}', tags=['regulation_management'])
def get_regulation_marks__regulation_mark(
    regulation_mark: str = Path(..., alias='regulation-mark')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/retreats',
    tags=[
        'card_data_retrieval',
        'category_operations',
        'identifier_management',
        'card_attribute_extraction',
        'energy_type_management',
        'regulation_management',
        'set_operations',
        'trainer_type_management',
        'game_stage_management',
        'suffix_handling',
        'type_management',
        'variant_management',
    ],
)
def get_retreats():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/retreats/{retreat}', tags=['category_operations'])
def get_retreats__retreat(retreat: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/series', tags=['card_data_retrieval'])
def get_series():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/series/{serie}', tags=['identifier_management'])
def get_series__serie(serie: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/sets',
    tags=['card_data_retrieval', 'identifier_management', 'card_attribute_extraction'],
)
def get_sets():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/sets/{set}', tags=['set_operations'])
def get_sets__set(set: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/sets/{set}/{cardLocalId}', tags=['set_operations'])
def get_sets__set__card_local_id(
    set: str, card_local_id: str = Path(..., alias='cardLocalId')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/stages', tags=['card_data_retrieval', 'identifier_management'])
def get_stages():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/stages/{stage}', tags=['game_stage_management'])
def get_stages__stage(stage: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/suffixes',
    tags=[
        'card_data_retrieval',
        'identifier_management',
        'card_attribute_extraction',
        'set_operations',
        'variant_management',
    ],
)
def get_suffixes():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/suffixes/{suffix}', tags=['suffix_handling'])
def get_suffixes__suffix(suffix: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/trainer-types',
    tags=[
        'card_data_retrieval',
        'category_operations',
        'identifier_management',
        'card_attribute_extraction',
        'energy_type_management',
        'regulation_management',
        'set_operations',
        'trainer_type_management',
        'game_stage_management',
        'suffix_handling',
        'type_management',
        'variant_management',
    ],
)
def get_trainer_types():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/trainer-types/{trainer-type}', tags=['trainer_type_management'])
def get_trainer_types__trainer_type(
    trainer_type: str = Path(..., alias='trainer-type')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/types',
    tags=[
        'card_data_retrieval',
        'category_operations',
        'identifier_management',
        'card_attribute_extraction',
        'energy_type_management',
        'regulation_management',
        'set_operations',
        'trainer_type_management',
        'game_stage_management',
        'suffix_handling',
        'type_management',
        'variant_management',
    ],
)
def get_types():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/types/{type}', tags=['type_management'])
def get_types__type(type: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/variants')
def get_variants():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/variants/{variant}', tags=['variant_management'])
def get_variants__variant(variant: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
